// ==UserScript==
// @name         VK-carousel-remove-script
// @namespace    http://tampermonkey.net/
// @version      1.1
// @description  Скрипт для удаления карусели картинок из ВК
// @match        https://vk.com/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Функция для удаления элементов с заданными классами внутри .post_content
    function removeElementsByClass(classes, container) {
        classes.forEach(className => {
            container.querySelectorAll(`.${className}`).forEach(element => element.remove());
        });
    }

    // Функция для настройки стиля галереи внутри .post_content
    function setGalleryInnerStyle(container) {
        const galleryInner = container.querySelector('.ui_gallery__inner.ui_gallery__inner--withTransitions');
        if (galleryInner) {
            galleryInner.style.display = 'grid';
            galleryInner.style.gridTemplateColumns = 'repeat(auto-fill, minmax(200px, 1fr))';

            // Определяем количество изображений
            const itemCount = galleryInner.childElementCount;

            // Рассчитываем количество строк для создания квадратной сетки
            const columns = Math.ceil(Math.sqrt(itemCount));
            const rows = Math.ceil(itemCount / columns);

            // Устанавливаем количество строк
            galleryInner.style.gridTemplateRows = `repeat(${rows}, 1fr)`;
        }
    }

    // Функция для замены классов на пустые значения внутри .post_content
    function replaceClasses(classes, container) {
        classes.forEach(className => {
            container.querySelectorAll(`.${className}`).forEach(element => element.className = '');
        });
    }

    // Основная функция для обработки контента внутри .post_content
    function processContent() {
        document.querySelectorAll('.post_content').forEach(container => {
            // Удаляем элементы с указанными классами
            removeElementsByClass([
                'ui_gallery__arrow',
                'ui_gallery__arrow_left',
                'PrimaryAttachmentCarousel__arrow',
                'PrimaryAttachmentCarousel__bullets',
                'ui_gallery__arrow ui_gallery__arrow_right',
                'PrimaryAttachmentCarousel__arrow'
            ], container);

            // Устанавливаем стиль для галереи
            setGalleryInnerStyle(container);

            // Заменяем классы на пустые значения
            replaceClasses([
                'ui_gallery__inner_cont',
                'ui_gallery_item',
                'PrimaryAttachmentCarousel__item'
            ], container);
        });
    }

    // Запускаем обработку при загрузке страницы
    processContent();

    // Наблюдаем за изменениями в DOM и динамически обрабатываем новый контент
    const observer = new MutationObserver(mutations => {
        mutations.forEach(mutation => {
            if (mutation.addedNodes.length > 0) {
                processContent();
            }
        });
    });

    // Настройка наблюдателя за всем документом
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
})();
